{{- if .Values.apps.dex.enabled }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  name: dex
spec:
  project: {{ include "dex.appproject" . }}
  source:
    repoURL: {{ .Values.cluster.ociRepoUrl | quote }}
    targetRevision: {{ .Values.apps.dex.targetRevision | quote }}
    chart: dex
    helm:
      values: |  
        prometheus:
          enabled: {{ .Values.apps.prometheus.enabled }}
          serviceMonitor:
            enabled: {{ .Values.apps.prometheusOperator.enabled }}
        dex:
        {{- if .Values.cluster.imagePullSecrets }}
          imagePullSecrets:
          {{- toYaml .Values.cluster.imagePullSecrets | nindent 10 }}
        {{- end }}
          image: 
            repository: {{ .Values.apps.dex.dexImageRepo | quote }}
            tag: {{ .Values.apps.dex.dexImageTag | quote }}
          ingress:
            annotations:
              kubernetes.io/ingress.class: {{ include "dex.ingressClass" . }}
              kubernetes.io/ingress.allow-http: "false"
              kubernetes.io/tls-acme: 'false'
            hosts:
              - host: {{ include "dex.url" . }}
                paths:
                  - path: /
                    pathType: Prefix
            tls:
              - hosts:
                - {{ include "dex.url" . }}
                secretName: {{ include "infra-stack.tlsSecret" . }}
          config:
            logger:
              level: "debug"
            issuer: "https://{{ include "dex.url" . }}/dex"
            oauth2:
              skipApprovalScreen: true
            staticClients:
            - id: prometheus-server
              redirectURIs:
              - 'https://{{ include "prometheus.url" . }}/oauth/callback'
              name: 'prometheus-server'
              secretEnv: client_secret
            - id: alertmanager
              redirectURIs:
              - 'https://{{ include "alertmanager.url" . }}/oauth2/callback'
              name: 'alertmanager'
              secretEnv: client_secret
            - id: grafana
              redirectURIs:
              - 'https://{{ include "grafana.url" . }}/login/generic_oauth'
              name: 'grafana'
              secretEnv: client_secret
            - id: argocd
              redirectURIs:
              - 'https://{{ include "argocd.url" . }}/auth/callback'
              name: 'argocd'
              secretEnv: $clientSecret
            - id: goldilocks-dashboard
              redirectURIs:
              - 'https://{{ include "goldilocks.url" . }}/oauth2/callback'
              name: 'goldilocks-dashboard'
              secretEnv: client_secret
            - id: karma
              redirectURIs:
              - 'https://{{ include "karma.url" . }}/oauth2/callback'
              name: 'karma'
              secretEnv: client_secret
            connectors:
              - name: Renault
                id: renault
                type: oidc
                config:
                  issuer: https://{{ .Values.cluster.idpUrl }}/nidp/oauth/nam
                  clientID: $clientId
                  clientSecret: $clientSecret
                  requestedScopes: ["openid", "arca", {{ .Values.cluster.idpRole | quote }} ]
                  requestedIDTokenClaims: {"groups": {"essential": true}}
                  redirectURI: https://{{ include "dex.url" . }}/dex/callback
                  insecureSkipEmailVerified: true
                  insecureEnableGroups: true
                  getUserInfo: true
                  userIDKey: uid
                  userNameKey: uid
                  claimMapping:
                    email: mail
                    groups: {{ .Values.cluster.idpRole | quote }}
                  scopes:
                    - arca
                    - {{ .Values.cluster.idpRole }}
          envFrom:
            - secretRef:
                name: dex-renault-oidc
            - secretRef:
                name: dex-server-oidc
          env:
            no_proxy: "{{ .Values.cluster.noProxy }}, *.cluster.local"
          envVars:
            - name: http_proxy
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cluster.proxyEnvSecret }}
                  key: {{ .Values.cluster.proxyEnvSecretKey }}
            - name: https_proxy
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cluster.proxyEnvSecret }}
                  key: {{ .Values.cluster.proxyEnvSecretKey }}
        vault:
          enabled: {{ .Values.apps.dex.vault.enabled }}
        {{- if .Values.apps.dex.vault.enabled }}
          serviceAccount:
            create: {{ .Values.apps.dex.vault.serviceAccount.create }}
          vaultRoleName: {{ .Values.cluster.vaultRoleName }}
          mountPath: {{ .Values.cluster.mountPath | quote}}
          vaultKeyPath: {{ .Values.apps.dex.vault.vaultKeyPath }}
        {{- end }}  
  destination:
    server: https://kubernetes.default.svc
    namespace: {{ include "dex.namespace" . | quote }}
  ignoreDifferences:
    - kind: ConfigMap
      name: dex-ca
      jsonPointers:
        - /data/dex-ca.pem
    - kind: Secret
      name: dex-tls
      jsonPointers:
        - /data/tls.crt
        - /data/tls.key
    - kind: Secret
      name: dex-ca
      jsonPointers:
        - /data/tls.crt
        - /data/tls.key

  {{- include "infra.syncPolicy" (list . "dex" ) | nindent 2 }}

{{- end }}
