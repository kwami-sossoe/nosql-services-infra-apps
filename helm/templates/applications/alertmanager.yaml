{{- if .Values.apps.alertmanager.enabled -}}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  name: alertmanager
spec:
  project: {{ include "alertmanager.appproject" . }}
  source:
    repoURL: {{ .Values.cluster.ociRepoUrl | quote }}
    targetRevision: {{ .Values.apps.alertmanager.targetRevision | quote }}
    chart: alertmanager
    helm:
      values: |
      {{- if .Values.cluster.imagePullSecrets }}
        imagePullSecrets:
        {{- toYaml .Values.cluster.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.apps.alertmanager.priorityClassName }}
        priorityClassName: {{.Values.apps.alertmanager.priorityClassName }}
      {{- end }}
        image:
          repository: {{ .Values.apps.alertmanager.alertmanagerImageRepo | quote }}
          tag: {{ .Values.apps.alertmanager.alertmanagerImageTag | quote }}
        resources:
          {{- .Values.apps.alertmanager.resources | toYaml | nindent 10 }}
        msteams:
          enabled: true
        {{- if .Values.cluster.imagePullSecrets }}
          imagePullSecrets:
          {{- toYaml .Values.cluster.imagePullSecrets | nindent 10 }}
        {{- end }}
          image:
            repository: {{ .Values.apps.alertmanager.msteamsImageRepo | quote }}
            tag: {{ .Values.apps.alertmanager.msteamsImageTag | quote }}
          webhookSecrets:
            name: {{ .Values.apps.alertmanager.msteamswebhookSecretsName }}
            key: {{ .Values.apps.alertmanager.msteamswebhookSecretsKey }}
          {{- with .Values.apps.alertmanager.defaultChannel }}
          defaultChannel: {{ . | quote }}
          {{- end }}
          {{- with .Values.apps.alertmanager.multiChannelConfig }}
          multiChannelConfig:
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          extraEnvs:
            - name: http_proxy
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cluster.proxyEnvSecret }}
                  key: {{ .Values.cluster.proxyEnvSecretKey }}
            - name: https_proxy
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cluster.proxyEnvSecret }}
                  key: {{ .Values.cluster.proxyEnvSecretKey }}
            - name: no_proxy
              value: "{{ .Values.cluster.noProxy }}, *.cluster.local"
          extraAnnotations:
            {{- .Values.apps.alertmanager.msteamsextraAnnotations | toYaml | nindent 12 }}
        ingress:
          enabled: true
          acme:
            enabled: false
          annotations:
            kubernetes.io/ingress.allow-http: "false"
            kubernetes.io/ingress.class: {{ include "alertmanager.ingressClass" . }}
          host: {{ include "alertmanager.url" . }}
          tls:
            secretName: {{ include "infra-stack.tlsSecret" . }}
        oidc:
          env:
            - name: "http_proxy"
              value: "{{ .Values.cluster.httpProxy }}"
            - name: "https_proxy"
              value: "{{ .Values.cluster.httpProxy }}"
            - name: "no_proxy"
              value: "{{ .Values.cluster.noProxy }}, *.cluster.local"
          enabled: true
          image: 
            repository: {{ .Values.apps.alertmanager.oidcProxyImageRepo | quote }}
            tag: {{ .Values.apps.alertmanager.oidcProxyImageTag | quote }}
          dexClient:
            enabled: false  
          configMap:
            issuerUrl: "https://{{ include "dex.url" . }}/dex"
          secret:
            create: false
            name: dex-server-oidc
        authorizations:
          enabled: true
          envoy:
            image:
              repository: {{ .Values.apps.alertmanager.envoyImageRepo | quote }}
              tag: {{ .Values.apps.alertmanager.envoyImageTag | quote }}
          rbac:      
            resources:
              - name: default-read-write
                uri: /*
                method:
                - HEAD
                - DELETE
                - POST
                - OPTIONS
                - PUT
                groups:
                  {{ include "alertmanager.oidcGroupRw" . }}
              - name: default-read  
                uri: /*
                method:
                - GET
                groups:
                  {{ include "alertmanager.oidcGroupRw" . }}
                  {{ include "alertmanager.oidcGroupRo" . }}
        karma:
          enabled: {{ .Values.apps.alertmanager.karma.enabled }}
          htpasswd:
            secretName: {{ .Values.apps.alertmanager.karma.htsecret | quote }}
            secretKey: {{ .Values.apps.alertmanager.karma.htsecretkey| quote }}
          groups:
          - karma
        vault:
          enabled: {{ .Values.apps.alertmanager.vault.enabled }}
        {{- if .Values.apps.alertmanager.vault.enabled }}
          serviceAccount:
            create: {{ .Values.apps.alertmanager.vault.serviceAccount.create }}
          vaultRoleName: {{ .Values.cluster.vaultRoleName }}
          mountPath: {{ .Values.cluster.mountPath | quote}}
          vaultKeyPath: {{ .Values.apps.alertmanager.vault.vaultKeyPath }}
        {{- end }}
        {{- if .Values.apps.alertmanager.vault.karma.enabled }}
          karma:
            enabled: {{ .Values.apps.alertmanager.vault.karma.enabled }}
            karmaKeyPath: {{ .Values.apps.alertmanager.vault.karma.karmaKeyPath }}
        {{- end }}

  destination:
    server: https://kubernetes.default.svc
    namespace: {{ include "alertmanager.namespace" . | quote }}
  
  {{- include "infra.syncPolicy" (list . "alertmanager" ) | nindent 2 }}

{{- end }}
